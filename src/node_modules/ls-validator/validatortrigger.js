module.exports = class ValidatorTrigger {
	/*
	*  A trigger object for calling a hook function whenever the
	*  validation state of a set of ValidatorSelectors changes.
	*/
	constructor(selectors, hook) {
		/*
		*  Construct the ValidatorTrigger object.
		*
		*  * 'selectors' is an array of selectors to use for
		*    this trigger.
		*  * 'hook' is the hook function to call whenever
		*    a change of state occurs.
		*/
		this.valid = null;
		this.hook = hook;
		this.selectors = selectors;

		for (let s of this.selectors) {
			s.add_hook(sel => this.trigger());
		}

		/*
		*  Manually trigger this ValidatorTrigger the first time
		*  so that the initial state of the input validators is
		*  taken into account.
		*/
		this.trigger();
	}

	trigger() {
		/*
		*  Check the validation state of the registered
		*  ValidatorSelectors and call the hook function
		*  if needed.
		*/
		let tmp = true;
		for (let s of this.selectors) {
			tmp = tmp && s.get_state();
			if (!tmp) { break; }
		}
		this.valid = tmp;
		if (this.hook) { this.hook(this.valid); }
	}

	is_valid() { return this.valid; }
}
