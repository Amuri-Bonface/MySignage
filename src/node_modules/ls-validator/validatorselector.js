var $ = require('jquery');
var assert = require('ls-assert').assert;

module.exports = class ValidatorSelector {
	/*
	*  A class used to select the inputs to validate
	*  with validator objects.
	*/
	constructor(element, style, validators, hooks) {
		/*
		*  Construct the ValidatorSelector object.
		*
		*  * 'element' is the HTML DOM element to attach this
		*    ValidatorSelector to.
		*  * 'style' is the HTML DOM element to style when the input
		*    is invalid. This should be a container <div> that can
		*    contain a few things.
		*
		*      1) An input element to add CSS styling to.
		*      2) A <div> with the class 'invalid-feedback' where an
		*         informational message is shown in case the input
		*         is invalid.
		*
		*    Note that 'style' doesn't necessarily have to be the same
		*    element as 'element', which provides additional flexibility.
		*    If style === null no styling is used.
		*  * 'validators' is a list of objects extending the class
		*    BaseValidator to add to the selector. 'validators' can be
		*    left null if it isn't needed. Validators can also be added
		*    with ValidatorSelector.add().
		*  * 'hooks' is an array of hook functions to call every time
		*    the validation state changes. The ValidatorSelector object
		*    is passed as the first argument to the hooks.
		*/
		this.validators = [];
		this.hooks      = [];
		this.enabled    = true;
		this.valid      = null;
		this.element    = element;
		this.style      = style;

		assert(
			this.element != null,
			'No input element selected.'
		);

		$(this.element).on('input', () => this.validate());

		if (validators) {
			for (let v of validators) {
				this.add(v);
			}
		}
		if (hooks) {
			for (let c of hooks) {
				this.add_hook(c);
			}
		}
		this.validate();
	}

	add(validator) {
		// Add a validator to the ValidatorSelector object.
		assert(
			validator != null,
			"Invalid null validator object."
		);
		assert(
			validator === Object(validator),
			"Invalid validator object."
		)
		this.validators.push(validator);
	}

	add_hook(hook) {
		// Add a hook to the ValidatorSelector object.
		assert(hook != null, "Invalid null hook.");
		this.hooks.push(hook);
	}

	set_dom_msg(msg) {
		if (this.style && msg) {
			this.msg = msg;
			$(this.style).find('.invalid-feedback').html(msg);
		}
	}

	set_state(valid) {
		if (this.valid != valid) {
			this.valid = valid;
			for (let c of this.hooks) { c(this); }
		}
	}

	set_style(valid) {
		if (this.style) {
			if (!valid) {
				$(this.style).find('input').addClass('is-invalid');
			} else if (valid) {
				$(this.style).find('input').removeClass('is-invalid');
			}
		}
	}

	enable(state) {
		this.enabled = state;
		this.validate();
	}

	validate() {
		if (this.enabled) {
			for (let v of this.validators) {
				if (!v.validate(this.element)) {
					this.set_state(false);
					if (!v.nostyle) {
						this.set_style(false);
						this.set_dom_msg(v.get_msg());
					} else {
						this.set_style(true);
						this.set_dom_msg('');
					}
					return;
				}
			}
		}

		this.set_state(true);
		this.set_style(true);
		this.set_dom_msg('');
	}

	get_state() { return this.valid; }
}
