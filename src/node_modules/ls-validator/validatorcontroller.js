/*
*  ValidatorController is a class for grouping together individual
*  input validators. This class makes it simple to handle various
*  tasks like enabling/disabling all input validators or adding
*  trigger hooks that execute when the validation state of the
*  validators changes.
*
*  This class is designed so that input validators can be defined
*  in their own source file by creating a new class and extending
*  ValidatorController. You can then pass an object containing the
*  input validator to super() in the new class constructor.
*/

var assert = require('ls-assert').assert;
var ValidatorTrigger = require('./validatortrigger.js');

module.exports = class ValidatorController {
	constructor(validators) {
		/*
		*  Construct the ValidatorController object. 'validators'
		*  is an associative array that contains the ValidatorSelector
		*  objects to add to the new ValidatorController.
		*/
		assert(
			new.target !== ValidatorController,
			'Cannot construct abstract class ValidatorController.'
		);
		assert(
			validators && validators === Object(validators),
			'Invalida validators object.'
		);

		this.validators = validators;
		this.triggers = [];

		/*
		*  Manually validate this ValidatorController once so that
		*  the initial validation state is taken into account.
		*/
		this.validate();
	}

	create_trigger(hook) {
		/*
		*  Create a ValidatorTrigger on the validators of this
		*  ValidatorController. 'hook' is the hook function
		*  attached to the trigger.
		*/
		this.triggers.push(
			new ValidatorTrigger(
				Object.values(this.validators),
				hook
			)
		);
	}

	validate() {
		/*
		*  Manually validate all validators of the ValidatorController.
		*/
		for (let v of Object.values(this.validators)) {
			v.validate();
		}
	}

	enable(state) {
		/*
		*  Enable or disable all validators of the ValidatorController.
		*/
		for (let v of Object.values(this.validators)) {
			v.enable(state);
		}
	}

	get_state() {
		/*
		*  Get the validation state of the ValidatorController, ie.
		*  whether all of the individual input validators are valid
		*  or not.
		*/
		for (let v of Object.values(this.validators)) {
			if (!v.get_state()) { return false; }
		}
		return true;
	}
}
