var $ = require('jquery');
var assert = require('ls-assert');

module.exports = class Validator {
	constructor(settings, msg, nostyle) {
		/*
		*  Construct the Validator object. Classes
		*  extending this class should always call the
		*  original constructor with eg. 'super(...args);'.
		*
		*  * settings = The validator settings array.
		*  * msg      = The invalid input message.
		*  * nostyle  = No styling is applied to the input element
		*               if this validator validates as invalid and
		*               'nostyle' is true.
		*/
		assert.assert(
			new.target !== Validator,
			'Cannot construct abstract class BaseValidator.'
		);
		assert.assert(
			settings && settings === Object(settings),
			'Invalid validator settings object.'
		);
		assert.assert(
			typeof this.validate === 'function',
			'Derived classes must override the function validate().'
		);

		this.settings = settings;
		this.msg = msg;
		this.nostyle = nostyle;
	}

	chk_settings(proto) {
		/*
		*  Check the current this.settings associative array
		*  against the 'proto' array. If settings that exist
		*  in 'proto' are missing from this.settings, errors
		*  are thrown.
		*/
		for (var i in proto) {
			var keys = Object.keys(this.settings);
			if (keys.indexOf(proto[i]) == -1) {
				throw new Error(
					'Invalid Validator settings. ("' +
					proto[i] + '" missing).'
				);
			}
		}
	}

	validate(element) {
		/*
		*  A function used for validating the validator.
		*  'element' is the input element to validate. The
		*  class extending BaseValidator must override this.
		*/
		return true;
	}

	get_msg() { return this.msg; }
}
