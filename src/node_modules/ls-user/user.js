/*
*  JavaScript User object implementation for LibreSignage.
*  This class is used to load and manipulate user data.
*/

var Quota = require('./quota.js').Quota;
var APIEndpoints = require('ls-api').APIEndpoints;
var assert = require('ls-assert').assert;

class User {
	constructor(api) {
		assert(api != null, 'An API object must be supplied.');
		this.api = api;
		this.data = null;
	}

	async create(user) {
		this.data = {};
		let resp = await this.api.call(
			APIEndpoints.USER_CREATE,
			{'user': user}
		);

		delete resp.error;
		this.data = Object.assign(this.data, resp.user);
	}

	async load(user) {
		let resp = null;
		this.data = {};

		if (user == null) {
			resp = await this.api.call(
				APIEndpoints.USER_GET_CURRENT,
				null
			);
		} else {
			resp = await this.api.call(
				APIEndpoints.USER_GET,
				{'user': user}
			);
		}

		delete resp.error;

		/*
		*  Create a separate Quota object from the quota data
		*  if the data exists in the response. This check is
		*  needed because quota data is only returned if the
		*  user is requesting their own userdata.
		*/
		if ('quota' in resp.user) {
			this.data = { quota: new Quota(resp.user.quota) };
			delete resp.user.quota;
		}

		// Add rest of the fetched data as-is.
		this.data = Object.assign(this.data, resp.user);
	}

	async save() {
		assert(this.data != null, "User not loaded.");
		await this.api.call(
			APIEndpoints.USER_SAVE,
			{
				'user':   this.data.user,
				'groups': this.data.groups,
				'pass':   this.data.pass ? this.data.pass : null
			}
		);
	}

	async remove() {
		assert(this.data != null, "User not loaded.");
		await this.api.call(
			APIEndpoints.USER_REMOVE,
			{user: this.data.user}
		);
		this.data = null;
	}

	set_password(pass) { this.data.pass = pass;     }
	set_groups(groups) { this.data.groups = groups; }

	get_user()         { return this.data.user;     }
	get_password()     { return this.data.pass;     }
	get_groups()       { return this.data.groups;   }
	get_sessions()     { return this.data.sessions; }
	get_quota()        { return this.data.quota;    }

	static async list_all(api) {
		assert(api != null, 'An API object must be supplied.');
		let resp = await api.call(
			APIEndpoints.USERS_LIST,
			null
		);
		return resp.users;
	}

	static async get_all(api) {
		assert(api != null, 'An API object must be supplied.');
		let users = {};
		let names = await User.list_all(api);
		for (let n of names ) {
			users[n] = new User(api);
			await users[n].load(n);
		}
		return users;
	}
}
exports.User = User;
