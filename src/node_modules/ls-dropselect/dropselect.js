var $ = require('jquery');
var assert = require('ls-assert').assert;
var EventData = require('ls-eventdata').EventData;

const template = (id) => `
	<button id="btn-${id}-dropselect"
		type="button"
		class="btn dropdown-toggle dropselect-open"
		data-toggle="dropdown"
		aria-haspopup="true"
		aria-expanded="false">
	</button>
	<div class="dropdown-menu dropselect-menu"
		aria-labelledby="btn-${id}-dropselect">
	</div>
`;

class DropSelect {
	constructor(container) {
		assert(container.id !== '', 'Container must have an ID.');

		this.container = $(container);
		this.options   = null;
		this.selected  = null;

		this.container
			.addClass('dropdown dropselect')
			.html(template(this.container.attr('id')));

		// Add event translators for the open/close events.
		this.container
			.on(
				'show.bs.dropdown',
				() => this.trigger('show', new EventData())
			)
			.on(
				'hide.bs.dropdown',
				() => this.trigger('hide', new EventData())
			);
	}

	set_button_html(html) {
		this.container.find('.dropselect-open').html(html);
	}

	set_options(options, def) {
		this.options  = options;
		this.selected = null;

		this.container.find('.dropselect-menu').html('');

		// Show the '< Empty >' item for empty lists.
		if (options.length === 0) {
			this.container.find('.dropselect-menu').append(
				$('<button></button>')
					.text('< Empty >')
					.attr({
						class: 'dropdown-item',
						type: 'button'
					})
					.prop('disabled', true)
			);
			return;
		}

		// Add selector options from 'options'.
		for (let o of options) {
			this.container.find('.dropselect-menu').append(
				$('<button></button>')
					.html(o)
					.attr({
						class: 'dropdown-item',
						type: 'button',
						value: o
					})
					.on('click', () => this.select(o, true))
			);
		}

		if (def != null) { this.select(def, false); }
	}

	select(option, trigger) {
		let elems = null, ed = null;

		assert(this.options != null, 'No options set.');
		assert(this.options.includes(option), 'No such option.');

		ed = new EventData(
			{ option: option },
			() => {
				this.selected = option;
				elems = this.container
							.find('.dropselect-menu')
							.children();
				for (let e of elems) {
					if ($(e).attr('value') === option) {
						$(e).html(
							`<i class="fas fa-angle-right"
								style="padding-right: 5px;">
							</i>${$(e).attr('value')}`
						);
					}
				}
			},
			null
		);

		if (trigger) {
			this.trigger('select', ed);
		} else {
			ed.then();
		}
	}

	get_selection() {
		return this.selected;
	}

	trigger(name, data) {
		this.container.trigger(
			`component.dropselect.${name}`,
			data
		);
	}
}
exports.DropSelect = DropSelect;
