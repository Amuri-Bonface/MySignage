/*
*  SlideList class for storing and manipulating a list of
*  LibreSignage Slides.
*/

class SlideList {
	constructor() {
		this.slides = {};
	}

	filter(filter) {
		/*
		*  Filter this SlideList. 'filter' is a dictionary of
		*  values that's compared against the data array of all
		*  slides. Slides that match all values in 'filter' are
		*  returned in a new SlideList object.
		*/
		let ret = new SlideList();
		let add = false;
		for (var s in this.slides) {
			add = true;
			for (var k in filter) {
				if (this.slides[s].data[k] != filter[k]) {
					add = false;
					break;
				}
			}
			if (add) { ret.slides[s] = this.slides[s]; }
		}
		return ret;
	}

	next(index, wrap) {
		/*
		*  Get the next slide in this SlideList. 'index' is the
		*  index of the slide preceding the returned slide (ie.
		*  the index of the current slide). If wrap == true, this
		*  function returns the first slide when no more slides exist.
		*/
		var n_d = -1, d = -1, n_i = 0;

		if (!this.length()) { return null; }
		for (var k in this.slides) {
			n_d = this.slides[k].get('index') - index;
			if (n_d > 0 && (n_d < d || d == -1)) {
				d = n_d;
			}
		}
		if (d == -1 && wrap) {
			return this.next(-1, false);
		} else if (d > 0) {
			n_i = index + d;
			for (var k in this.slides) {
				if (this.slides[k].get('index') == n_i) {
					return this.slides[k];
				}
			}
		}
		return null;
	}

	get_slides() { return this.slides; }
	length()     { return Object.keys(this.slides).length; }
}
exports.SlideList = SlideList;
