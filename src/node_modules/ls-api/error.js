var assert = require('ls-assert');
var APIEndpoints = require('./endpoints').APIEndpoints;

class APIError extends Error {
	constructor(response, file, line) {
		super('', file, line);
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, APIError);
		}

		this.response = {};

		// Copy API response error data.
		for (let k of ['error', 'thrown_at', 'e_msg', 'e_trace']) {
			if (Object.keys(response).indexOf(k) !== -1) {
				this.response[k] = response[k];
			} else {
				this.response[k] = 'Unknown';
			}
		}
		this.message = this.toString();
	}

	get_code()    { return this.response.error; }
	get_err_msg() { return this.response.e_msg; }

	toString() {
		let ret = '';
		let r = this.response;
		ret =  `\nAPI Error (${r.error}): ${r.e_msg}\n`;
		ret += `\tat ${r.thrown_at}\n`;
		ret += 'Server stack trace:\n';
		ret += `\t${r.e_trace.replace('\n', '\n\t')}\n\n`;
		return ret;
	}

	static err(name) {
		/*
		*  Get the integer error code for the error 'name'. This function
		*  is not normally needed, but it should be used in code where
		*  the error codes may not have been loaded yet. If the error
		*  'name' is not found, -1 is returned.
		*/
		return name in APIError.codes ? APIError.codes[name] : -1
	}

	static async init(api) {
		/*
		*  Initialize the API error system.
		*/
		if (!APIError.inited) {
			let tmp = {};
			tmp = await api.call(APIEndpoints.API_ERR_CODES, null);
			APIError.codes = tmp.codes;

			tmp = await api.call(APIEndpoints.API_ERR_MSGS, null);
			APIError.messages = tmp.messages;

			APIError.inited = true;
		}
	}
}
APIError.codes    = [];
APIError.messages = [];
APIError.inited   = false;
exports.APIError  = APIError;

